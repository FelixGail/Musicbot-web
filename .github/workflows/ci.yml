name: BUILD

on:
  pull_request:
    types: [labeled]
  push:

jobs:
  build:
    name: Build
    strategy:
      matrix:
        node-version: [12.x]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event.label.name == 'allow-build'

    steps:
      - uses: actions/checkout@v1
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: install dependencies
        run: yarn
      - name: Bootstrap
        run: yarn bootstrap
      - name: Set server version
        run: yarn setVersion
      - name: Build
        run: yarn build
      - name: Build arm
        run: |
          yarn pkg packages/server/package.json -o build/musicbot-arm -t linux-armv7 --no-bytecode
      - name: Upload artifacts
        uses: actions/upload-artifact@v1
        with:
          name: musicbot-executables
          path: build/
      - name: Remove server dependencies
        run: rm -rf packages/server/node_modules
      - name: Copy additional Server files
        run: |
          mkdir production/windows && cp -r windows/*.ps1 production/windows
          cp yarn.lock production/
      - name: Upload client production build
        uses: actions/upload-artifact@v1
        with:
          name: production
          path: packages/server
  package:
    strategy:
      matrix:
        node-version: [12.x]
        os: [ubuntu, windows, macos]

    name: Package
    runs-on: ${{ matrix.os }}-latest
    needs: [build]

    steps:
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Download client production build
        uses: actions/download-artifact@master
        with:
          name: production
      - name: install dependencies
        run: cd production && yarn install --frozen-lockfile && cd ..
      - name: Package
        run: yarn pkg production -o build/musicbot-web-${{ matrix.os }}
      - name: Add Nuget PackageSource
        if: matrix.os == 'windows'
        run: Register-PackageSource -Name NuGetGallery -Location https://www.nuget.org/api/v2 -ProviderName NuGet -Trusted
      - name: Install SignTool
        if: matrix.os == 'windows'
        run: Install-Package signtool -Source NuGetGallery -Destination signtool -RequiredVersion 10.0.17763.132
      - name: Create Certificate
        if: matrix.os == 'windows'
        run: |
          $kvSecretBytes = [System.Convert]::FromBase64String("${{ secrets.PFX_CERT }}")
          [System.IO.File]::WriteAllBytes("cert.pfx", $kvSecretBytes)
      - name: Sign Executable
        if: matrix.os == 'windows'
        run: |
          .\signtool\signtool.10.0.17763.132\tools\signtool.exe sign /f cert.pfx /p ${{ secrets.CERT_PASSWORD }} build/musicbot-web-${{ matrix.os }}.exe
      - name: Upload artifacts
        uses: actions/upload-artifact@v1
        with:
          name: musicbot-executables
          path: build/
  release:
    name: Create Release
    needs: [package]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    steps:
      - name: Install zip
        run: sudo apt install zip -y
      - uses: actions/checkout@v1
      - uses: actions/download-artifact@master
        with:
          name: musicbot-executables
      - name: Download client production build
        uses: actions/download-artifact@master
        with:
          name: production
      - name: Zip build artifact
        run: cd production && zip -r ../musicbot-web.zip ./* && cd ..
      - name: Calculate variables
        id: vars
        run: |
          echo ::set-output name=version_tag::$(cat package.json | grep version | head -1 | awk -F= "{ print $2 }" | sed -E 's/(version)|[:,\",]//g' | tr -d '[[:space:]]')
          echo ::set-output name=win_hash::$(sha512sum musicbot-executables/musicbot-web-windows.exe | awk '{print $1}')
      - name: Create scoop manifest
        run: |
          cp windows/scoop-template.json musicbot-web.json
          sed -i -e 's/{{version}}/${{ steps.vars.outputs.version_tag }}/g' musicbot-web.json
          sed -i -e 's/{{hash}}/${{ steps.vars.outputs.win_hash }}/g' musicbot-web.json
      - uses: ncipollo/release-action@v1
        with:
          artifacts: "musicbot-executables/*, musicbot-web.zip, musicbot-web.json"
          body: ${{ github.event.head_commit.message }}
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ steps.vars.outputs.version_tag }}
  docker:
    name: Publish docker container
    needs: [build]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop')
    steps:
      - uses: actions/checkout@v1
      - name: Download client production build
        uses: actions/download-artifact@master
        with:
          name: production
      - name: Move into docker directory
        run: mv production docker
      - name: Build & Publish
        uses: elgohr/Publish-Docker-Github-Action@master
        with:
          name: felixgail/musicbot-web
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          workdir: docker
